openGL（GLSL,OpenGL Shading Language）:
  概念：
    用于渲染2D、3D矢量图形的跨语言、跨平台的应用程序编程接口（API）
    需要选择一门语言来调用，多数使用C++
  数学：
    常用数学公式：
      https://www.cnblogs.com/makeamericagreatagain/p/14311269.html
    线性代数
    几何
    三角学
  命名：
    接口：
      给予开发公司命名标识符：
        例如：
          NVIDIA:NV
      多个供应商认同：
        EXT
      标准拓展：
        ARB
  在线：
    https://shdr.bkcore.com/
  
  教程：
    雨水效果：
      https://seblagarde.wordpress.com/2013/01/03/water-drop-2b-dynamic-rain-and-its-effects/
    PBR:
      教程：
        https://learnopengl-cn.github.io/07%20PBR/01%20Theory/
        原文：
          https://learnopengl.com/PBR/Theory

    2d：
      https://www.udemy.com/course/making-glsl-shaders-for-2d-game-development/
      13美元
      https://youtu.be/NQ-g6v7GtoI
    
    渲染管线：
      https://developer.arm.com/documentation/102479/0100/Efficient-render-passes

    全栈：
      https://learnopengl.com/Introduction
      进度：
        入门-openGL
      笔记：
        入门：
          OpenGL：
            其他：
              OpenGL仅仅是一个规范
              OpenGL库由显卡制造商编写
              当 OpenGL 显示出它不应该出现的奇怪行为时，这很可能是显卡制造商（或开发/维护库的人）的错。
              OpenGL规范文档:
                https://www.khronos.org/registry/OpenGL/specs/gl/glspec33.core.pdf
              使用最新版本的 OpenGL 的功能时，只有最现代的显卡才能运行您的应用程序。
            扩展
              开发人员可以直接拓展opengl
            状态机
               OpenGL 本身就是一个大型状态机 ！
               OpenGL的状态 通常被称为OpenGL语境.
            对象
              OpenGL 库是用 C 编写的，并允许在其他语言中进行许多派生，但它的核心仍然是一个 C 库。

          创建一个窗口：
          你好窗口：
          你好三角：
            在 OpenGL 中，一切都在 3D 空间中，但屏幕或窗口是一个 2D 像素阵列，因此 OpenGL 的大部分工作是将所有 3D 坐标转换为适合您屏幕的 2D 像素。
            图形管道可以分为两大部分：
            第一部分将您的 3D 坐标转换为 2D 坐标，
            第二部分将 2D 坐标转换为实际的彩色像素。
            几乎所有情况，我们只需要使用顶点和片段着色器。
            顶点输入：
              输入顶点数据
              与通常的屏幕坐标不同，正 y 轴点在向上方向，(0,0)坐标位于图形的中心，而不是左上角。最终，您希望所有（转换后的）坐标都位于此坐标空间中，否则它们将不可见。
              然后您的 NDC 坐标将转换为 屏幕空间坐标 通过 视口变换 使用您提供的数据 视口. 然后将生成的屏幕空间坐标转换为片段作为片段着色器的输入。

    斯坦福大学公开课:
      可穿戴设备：
        https://web.stanford.edu/class/ee367/

      交互图形学：
        https://web.stanford.edu/class/cs248/lectures.html
      
      图形成像：
        https://web.stanford.edu/class/cs248/lectures.html

      计算机呈像显示：
        https://web.stanford.edu/class/ee367/
  关键环节：
    关键字：
      blit：
        含义是内存中图像的位块传输
    深度测试：
      https://learnopengl-cn.readthedocs.io/zh/latest/04%20Advanced%20OpenGL/01%20Depth%20testing/
    阴影：
      https://learnopengl-cn.readthedocs.io/zh/latest/05%20Advanced%20Lighting/03%20Shadows/02%20Point%20Shadows/
    
            


            
  其他：
    二进制着色器:
      为了反复读取代码，在编译一次后产生的二进制文件保存，下次直接读取二进制着色器
  mac：
    vscode环境配置:
      https://zhuanlan.zhihu.com/p/151384233
   
openGL ES(OpenGL for Embedded Systems ):
    概念：
      openGL的子集，专门用于嵌入式设备
    版本及功能：
      1.0=
        四边形和多边形渲染基元
        texgen，线和多边形点画
        多重采样
      +=1.1
        支持多纹理
        支持mipmap（lod）
        顶点缓冲区
        状态查询
        用户剪辑平面
        点渲染
      +=2.0
        可编程的渲染管道
      +=3.0
        渲染管道的多项增强功能可加速高级视觉效果
        ETC2/EAC 纹理压缩 统一平台纹理集
        支持整数和32 位 浮点运算
        支持更多纹理：浮点纹理、3D 纹理、深度纹理、顶点纹理、NPOT 纹理、R/RG 纹理、不可变纹理、2D 阵列纹理、swizzles、LOD和mip 级别钳位、无缝立方体贴图和采样器对象
        纹理和渲染缓冲区格式确定
      +=3.1
        计算着色器 为了 cpu gpu 更紧密合作
        独立的顶点和片段着色器
        间接绘制命令
      +=3.2
        几何和曲面细分着色器可在 GPU 上高效处理复杂场景
        浮点渲染目标可提高更高精度计算操作的灵活性
        ASTC 压缩以减少用于处理纹理的内存占用和带宽
        用于复杂合成和处理多种颜色附件的增强混合
        高级纹理目标，例如纹理缓冲区、多样本二维数组和立方体贴图数组
        调试和健壮性功能可实现更轻松的代码开发和安全执行。
   《 OpenGL ES 3.0编程指南 》：
      
操作：
  可视化顶点法线：(TODO)
    https://learnopengl.com/Advanced-OpenGL/Geometry-Shader