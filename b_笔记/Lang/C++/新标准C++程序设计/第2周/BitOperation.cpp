#include <stdio.h>
int main()
{
      // 整数类型（int,char, long 等）变量中的"某一位"(bit)，或者"若干位"进行操作。
      // 比如：
            // 1.判断某一位是否为1
            // 2.只改变其中某一位，而保持其他位都不变
      // C/C++语言提供了六种位运算符来进行位运算操作：
      // 双目运算符:运算所需变量为两个的运算符
            // 1.& 按位与(双目)
              // 通常用来将某变量中的某些位清0且同时保留其他位不变。也可以用来获取某变量中的某一位。
            // 2.| 按位或(双目)
              // 将参与运算的两操作数各对应的二进制位进行或操作，只有对应的两个二进位都为0时，结果的对应二进制位才是0，否则为1。
              // 按位或运算通常用来将某变量中的某些位置1且保留其他位不变。
            // 3.^ 按位异或(双目)
              // 只有对应的两个二进位不相同时，结果的对应二进制位才是1，否则为0。
              // 按位异或运算通常用来将某变量中的某些位取反，且保留其他位不变。
            // 4.~ 按位非(取反)(单目)
              // 二进制位0变成1，1变成0
            // 5.<< 左移(双目)
              // 将a各二进位全部左移b位后得到的值。
              // 左移1位，就等于是乘以2，左移n位，就等于是x乘以pow(2,n)。而左移操作比乘法操作快得多。
            // 6.>> 右移(双目)0
              // 右移n位，就相当于左操作数除以2n，并且将结果往小里取整。
              // 如果原符号位为1，则右移时高位就补充1，原符号位为0，则右移时高位就补充0。
      int n1 = 15; 
      short n2 = -15;
      unsigned short n3 = 0xffe0;
      char c = 15;
      n1 = n1>>2; 
      n2 >>= 3;
      n3 >>= 4;
      c >>= 3; 
      printf( "n1=%d,n2=%x,n3=%x,c=%x",n1,n2,n3,c);

      int a1 = 2 << 4; // 2*pow(2,4) = 32
      
      printf("\na1=%d",a1);

      // 设 a = 4 , n = 2
      // 求 一个表达式的值 和 a 的 第n位相同。
      int a = 4;
      // 0000 0100
      int n = 2;
      // 0000 0010
      int r = (a >> n) & 1;
      // 0000 0001 (a >> n)
      // ---
      // 0000 0001
      // &
      // 0000 0001
      // ---
      // 0000 0001
} 