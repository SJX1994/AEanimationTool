语言目的：
      封装与重用，可以快速做大型程序的开发
编译器：
      g++

学习网址：
      阅读代码：
            https://www.jianshu.com/p/7fe990b7aac3
            https://github.com/Light-City/CPlusPlusThings
      笔记：
            const：     
                  不能被修改的值，为了增加代码健壮性
                  首次声明前面加：extern，之后就不能修改了
                  不变类型：
                        char const* a;
                  或者不变常量：
                        char* const a;
            static:
                  可以优化程序，多次调用，空间只分配一次，分配在生命周期内
                  静态变量：可以是变量:每次调用不会被初始化
                  静态成员：可以是调用类：贯穿整个生命周期(一个生命周期调用一次)
            this指针：
                  this代表当前类的内部
            inline:
                  内联函数，就是通过头文件就能访问/调用，代码长或者循环 不宜内联
            sizeof:
                  计算占用存储空间的
            ::
                  作用域 全局，类，命名空间
            ->
                  访问成员 语法糖
            &：
                  引用(reference):
                        int ival = 1024;
                        int &refVal = ival; // refVal 指向 ival 的值（是ival的另一个名字），refVal和ival绑定（bind），而不是拷贝
                        int &refVal2;  // 报错：引用必须初始化
                        refVal = 2; // 把2赋值给 refVal 指向的对象，此处即是赋给了 ival
                        int &refVal3 = refVal; // refVal3 绑定了 refVal 绑定了 ival
                        
                  引用，获取变量的地址
            *
                  带有地址的变量：
                        int  var = 20;
                        int  *ip;  

                        ip = &var;

                        var 的值：20
                        ip 的值：0xbfc601ac
                        *ip 的值： 20
            
            占位符：
                  先以一个类型占个位置
            虚函数与抽象类
std关键字：
     #pragma region + #pragma endregion：
            代码折叠
      #include ""       
      #include <>:
            区别在于预处理器搜索包含文件的位置,
            对于#include <filename>预处理器以依赖于实现的方式搜索，通常在编译器/IDE 预先指定的搜索目录中。此方法通常用于包含标准库头文件。
            对于#include "filename"预处理器，首先在与包含指令的文件相同的目录中搜索，然后按照用于#include <filename>表单的搜索路径进行搜索。此方法通常用于包含程序员定义的头文件。
      #ifndef xxx
      #define xxx:
            当再次包含该代码时，第一个ifndef失败，导致一个空白文件。
            这可以防止双重声明任何标识符，例如类型、枚举和静态变量。
            只执行一次
      const：     
                  不能被修改的值，为了增加代码健壮性
                  首次声明前面加：extern，之后就不能修改了
                  不变类型：
                        char const* a;
                  或者不变常量：
                        char* const a;
      static:
                  可以优化程序，多次调用，空间只分配一次，分配在生命周期内
                  静态变量：可以是变量:每次调用不会被初始化
                  静态成员：可以是调用类：贯穿整个生命周期(一个生命周期调用一次)
      this指针：
                  this代表当前类的内部
      inline:
                  内联函数，就是通过头文件就能访问/调用，代码长或者循环 不宜内联
      sizeof:
                  计算占用存储空间的
      explicit:
                  只能显示转化
      friend：
                  所有元素对类开放
      memset:
                  填充内存块
      chrono：
                  控制时间
      动态记忆体配置：
            malloc：
                  void * malloc (size_t size)分配请求的内存并返回一个指向它的指针。
            calloc：
                  void *calloc(size_t nitems, size_t size)分配请求的内存并返回指向它的指针。malloc和calloc的区别在于 malloc 不会将内存设置为零，而 calloc 将分配的内存设置为零。
            realloc：
                  oid *realloc(void *ptr, size_t size)尝试调整ptr指向的内存块的大小，该内存块先前通过调用malloc或calloc分配。
            free：
                  void free (void *ptr) 释放先前通过调用 calloc、malloc 或 realloc 分配的内存。

标识符：
      &:
            返回值的地址
      *：
            返回地址的值
      ~:
            取相反数
      ::
            作用域 全局，类，命名空间 实现头文件里的方法
      ->
            只存了一个地址，这个地址指向具体的方法 (提高内存使用效率) (访问成员 语法糖 针对指针调用方法 如果针对)
      .     
            将整个方法全部传入 (内存使用效率不高)
概念：
      析构函数：
            与构造函数相反，当对象结束其生命周期，如对象所在的函数已调用完毕时，系统自动执行析构函数。
      重用 re-use:
            可重用代码是在多个功能中使用相似的代码。
      死锁：
            当多个进程试图同时访问同一个资源时，就会发生锁。
      回调：
            如果一个函数的引用作为参数传递给另一个函数来调用它，那么它将被称为回调函数。
      硬编码：
            是指将可能被视为输入或配置数据的内容直接嵌入程序或其他可执行对象的源代码
      面向对象编程：
            控制反转、依赖注入、依赖查找
            继承：
                  定义：
                        据另一个类来定义一个类
                  目的：
                        重用代码功能和提高执行时间的效果。
                  关系：
                        基类：
                              派生类1
                              派生类2
                              派生类3
                              ...
                        派生类：
                              继承 基类1
                              继承 基类2
                              继承 基类3
                              ...
                        派生类：
                              可以访问基类的 public protect 不可访问 private
                  写法：
                        派生类：
                              class <派生类名>:<继承方式1><基类名1>,<继承方式2><基类名2>,…
                              {
                              <派生类类体>
                              };
            封装
            多态
      野内存：

            A* a = new A();
            A* b = new B();
            a = b;
            a 成为野指针 占用内存
      智能指针：shared 检查被引用几次 如果是0次直接释放
      值类型：int float double
      引用类型: string dirt list

      嵌套类:
            嵌套类就是可以在一个类中定义另一个类。这个被嵌套的类的作用域就只在它的上一级类中。
            
      内存越界：
            int a[10];
            a[12] = 10;
      内存溢出：
            char str[5] = "1234567";
      显式 隐式：
            计算机是否默认转换

      构造函数：
            设置初始值

      GC:
            无效内存释放系统
            C语言本身没有提供GC机制，而C++ 0x则提供了基于引用计数算法的智能指针进行内存管理。也有一些不作为C++标准的垃圾回收库，如著名的Boehm库。

      数据结构：
            链表：
                  便于增删改查
      
      任务调度：

      异步：
            程序可以在等待响应的同时可以继续做其他事情。CPU就不会空闲了。wait
            具体方法是开启多个线程。async
            await是用来等待获取返回值
            wait是直接堵塞一个线程

      线程：
            轻量的进程
      并行：
            执行多个指令
      库：
            概念：
                  可以复用的代码
            静态库：
                  一组目标文件（.o/.obj文件）的一个压缩包
                  特征:
                       1 函数库的链接是放在 编译 时期完成的
                       2 程序在运行时与函数库再无瓜葛，移植方便
                       3 浪费空间和资源，因为所有相关的目标文件与牵涉到的函数库被链接 合成一个可执行文件.exe

            动态库
                  动态库在程序运行时被载入
                  特征：
                       1 程序运行时加载链接
                       2 可以实现进程之间的资源共享
                       3 程序升级简单
                       4 链接载入可由代码控制
      编译步骤：
            .h .cpp源文件 - 预编译 - 编译 - 汇编 - .lib .dll 链接 - .exe
写法：
      class derived-class: access-specifier base-class:
            属于 C++ 继承的范畴。
            目的重用代码功能和提高执行效率
            继承代表了 is a 关系。dog is a animal
            access-specifier 可以定义为：
                  public: 公有的，可以被任何程序访问
                  protected: 受保护的，可以被本类和子类访问
                  private: 私有的，只能被本类访问
                  不定义默认为 private
            ref：https://www.runoob.com/cplusplus/cpp-inheritance.html
      
            ref:https://en.cppreference.com/w/cpp/language/virtual

      virtual void f(int) override;
            属于override的范畴
            目的在头文件中定义函数，在派生类中实现函数
            struct 写法：
                  struct B
                  {
                        virtual void f(int);
                  };
                  
                  struct D : B
                  {
                        virtual void f(int) override;  // OK, D::f(int) overrides B::f(int)
                        virtual void f(long) override; // Error: f(long) does not override B::f(int)
                  };
            class 写法：
                  B.h
                        class B
                        {
                              virtual void f(int){}
                        };
                  D.h
                        class D : B
                        {
                              virtual void f(int) override;
                        };
                  D.cpp
                        void D::TestMe(int)
                        {

                        }