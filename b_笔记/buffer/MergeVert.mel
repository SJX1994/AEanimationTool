            global int $troggle = 0;
            global proc VertexNormalSort(){
                  if(`window -query -exists adia_myVertexNormalSort_Window`)
                  deleteUI adia_myVertexNormalSort_Window;
                  string $s = "mergPoint";
                  window -title $s -menuBar true -maximizeButton false -minimizeButton true adia_myVertexNormalSort_Window;
                  columnLayout -adjustableColumn true;
                        button -height 23 -width 23 -backgroundColor 255 241 155 -label "Merg"
                        -command "Merg";
                        text -label " " -en off;
                  columnLayout -adjustableColumn true;
                        button -height 23 -width 23 -backgroundColor 255 241 155 -label "MergVert"
                        -command "MergVert";
                        text -label " " -en off;
                  columnLayout -adjustableColumn true;
                        button -height 23 -width 23 -backgroundColor 255 241 155 -label "Show"
                        -command "Show";
                        text -label " " -en off;
                  window -edit -widthHeight 600 300 adia_myVertexNormalSort_Window;
                  showWindow adia_myVertexNormalSort_Window;
            }


            proc Merg()
            {
                        $selectList = `ls -selection -flatten`;
                        $elementVertex = `filterExpand -expand on -selectionMask 31 -selectionMask 70 $selectList`;
                        if(size($elementVertex)>0)
                        {
                              for($i=0;$i<size($elementVertex);$i++)
                              {
                              print( $elementVertex[$i]);
                              }
                        MergeToCenter ;
                        

                        }
                        select -cl; 
            }
            proc Show()
            {
                  global int $troggle;


                  if($troggle==0)
                  {
                        //ToggleVertexNormalDisplay;
                        polyOptions -sizeVertex 12.0;
                        polyOptions -sizeNormal 22.0;
                              setPolygonDisplaySettings("vNormal");
                        polyOptions -displayNormal true;
                              
                        $troggle=1;
                  }else{
                        polyOptions -displayNormal false;
                        polyOptions -sizeVertex 9.0;
                        $troggle=0;
                  }
                  
                  
            }
            proc MergVert()
            {
                  string $selectList[]; 
                  vector  $vertexPos;
                  vector  $vertexPoss[];
                  float $diss[];
                  //key is elementVertexs value is vertexPos
                  string $vertexName[];
                  string $vertexName2[];

                  $selectList = `ls -selection -flatten`;
                  $elementVertexs = `filterExpand -expand on -selectionMask 31 -selectionMask 70 $selectList`; 
                  //save verts pos
                  for($i=0;$i<size($elementVertexs);$i++ )
                  {
                        $vertexPos = `pointPosition -w $elementVertexs[$i]`;
                        
                        
                        $vertexPoss[size($vertexPoss)] = $vertexPos;

                        $vertexName[size($vertexName)] = $elementVertexs[$i];
                        
                       // print("__x:"+ $vertexPos + "__y:"+ $vertexPos + "__y:"+ $vertexPos+"\n" );
                  }
                  //count distance
                  string $v2[];
                  string $v1[];
                  for( $i=0 ; $i<size($vertexPoss) ; $i++ )
                  {
                        
                        for( $ii=0 ; $ii<size($vertexPoss) ; $ii++)
                        {
                            float $dis =  getDistance($vertexPoss[$i],$vertexPoss[$ii]);
                            int $found = floatArrayContains( $dis, $diss );
                            if($dis != 0 && $found != 1)
                            {
                                  
                                  
                                  $diss[size($diss)] = $dis;
                                  $v2[size($v2)] = $elementVertexs[$ii];
                                  $v1[size($v1)] = $elementVertexs[$i];
                            }
                              
                            
                        }
                        
                  }
                  float $oldDiss[] = $diss;
                  float $newDiss[] =  sort($diss);
                  int $index = getIndex($oldDiss,$newDiss[0]);
                  print("min:"+   $newDiss[0]  + "\n" + "index: " + $index +"\n");

                  select -cl; 
                  select -add $v1[$index];
                  select -add $v2[$index];
                  //MergeToCenter ;

                  print($vertexPoss);
                  print("dis: \n");
                  print($diss);
                  
            }
            //math
            proc float getDistance(vector $x, vector $y)
            {
                  float $res = sqrt(
                        pow($x.x - $y.x,2)+
                        pow($x.y - $y.y,2)+
                        pow($x.z - $y.z,2)
                  );
                  return $res;
            }
            
            //get index
            proc int getIndex(float $array[], float $search)
            {     
                  int $i;
                  for($i=0; $i < size($array); $i++)
                  {
                        if($array[$i] == $search)
                        break;
                  }
                  return $i;
            }
           

            
            VertexNormalSort();