//VertexNormalBatchV2 
     global proc VertexNormalSort(){ 
         if(`window -query -exists adia_myVertexNormalSort_Window`) 
         deleteUI adia_myVertexNormalSort_Window; 
         string $s = "Adia_vertexNormalBatch"; 
         window -title $s -menuBar true -maximizeButton false -minimizeButton true adia_myVertexNormalSort_Window; 
         columnLayout -adjustableColumn true; 
             text -label "Refer the manual to use" -en off; 
             radioButtonGrp -label "Mode" -numberOfRadioButtons 4 
             -labelArray4 "Hardening" "Copy" "Paste" "mid" -sl 1 
             adia_Select; 
             button -height 23 -width 23 -backgroundColor 255 241 155 -label "Run" 
             -command "Do"; 
             text -label " " -en off; 
         window -edit -widthHeight 600 100 adia_myVertexNormalSort_Window; 
         showWindow adia_myVertexNormalSort_Window; 
     } 
     global string $element_G[]={}; 
     global string $vertexName_G[]={}; 
     global string $objectName_G[]={}; 
     global float $vertexNormal_G[]={}; 
     proc Do() 
     { 
         init(); 
         int $UISwitch = `radioButtonGrp -q -sl adia_Select`; 
         switch($UISwitch) 
         { 
             case 1: 
                 hardening(); 
             break; 
             case 2: 
                 copy(); 
             break; 
             case 3: 
                 paste(); 
             break; 
             case 4: 
                 mid(); 
             break; 
             default: 
                 print("Not In UI"); 
             break; 
         } 
     } 
     proc mid()
     {

           print("hello mid"+"\n");
            float $vertexNormal_1[];
            float $vertexNormal_2[];
            float $vertexNormal_mid[];
            string $selectList[]; 
            $selectList = `ls -selection -flatten`; 
            $elementVertex = `filterExpand -expand on -selectionMask 31 -selectionMask 70 $selectList`;
      if(size($elementVertex)>=1) 
         { 
             if (size($elementVertex)==1)
             {
                 AveragePolygonNormals;
             }else
             {
                 $vertexNormal_1 = `polyNormalPerVertex -q -xyz $elementVertex[0]`;
                $vertexNormal_2 = `polyNormalPerVertex -q -xyz $elementVertex[1]`; 
                print(" Value 1 :"+"x:"+ $vertexNormal_1[0]  +"__y:"+$vertexNormal_1[1]  +"__z:"+$vertexNormal_1[2]+"\n"); 
                print(" Value 2 :"+"x:"+ $vertexNormal_2[0]  +"__y:"+$vertexNormal_2[1]  +"__z:"+$vertexNormal_2[2]+"\n");
                $vertexNormal_mid[0] =($vertexNormal_1[0] + $vertexNormal_2[0]) /2;
                $vertexNormal_mid[1] =($vertexNormal_1[1] + $vertexNormal_2[1]) /2;
                $vertexNormal_mid[2] =($vertexNormal_1[2] + $vertexNormal_2[2]) /2;
                print(" Value mid :"+"x:"+ $vertexNormal_mid[0]  +"__y:"+$vertexNormal_mid[1]  +"__z:"+$vertexNormal_mid[2]+"\n");
                polyNormalPerVertex -xyz $vertexNormal_mid[0] $vertexNormal_mid[1] $vertexNormal_mid[2] $elementVertex[0]; 
                polyNormalPerVertex -xyz $vertexNormal_mid[0] $vertexNormal_mid[1] $vertexNormal_mid[2] $elementVertex[1]; 
             }
             

             

         } 
         else
         {
            print("select 2 vertexNormal");
         }
        

     }
     proc hardening() 
     { 
         global string $element_G[]; 
         global string $vertexName_G[]; 
         global string $objectName_G[]; 
         print("Harden Run"+"\n"); 
         string $vtxlist[] = `polyListComponentConversion -ff -tv $element_G`; 
         $vtxlist = `filterExpand -sm 31 -ex true $vtxlist`; 
         for($vtx in $vtxlist) 
         { 
             string $faceList[] = `polyListComponentConversion -fv -tf $vtx`; 
             $faceList =`filterExpand -sm 34 -ex true $faceList`; 
             string $faceList2[] = stringArrayRemove($element_G,$faceList); 
             float $avNormal[] = {0,0,0}; 
             int $i = 0; 
             if(size($faceList2)==0) 
             { 
                 $faceList2 = $faceList; 
             } 
             for($ff in $faceList2) 
             { 
                 string $nrm[] = `polyInfo -faceNormals $ff`; 
                 string $tkBuf[]; 
                 float $tNml[] = {0,0,0}; 
                 tokenize $nrm[0] " " $tkBuf; 
                 $tNml[0]+=((float)($tkBuf[2])); 
                 $tNml[1]+=((float)($tkBuf[3])); 
                 $tNml[2]+=((float)($tkBuf[4])); 
                 $avNormal[0] += $tNml[0]; 
                 $avNormal[1] += $tNml[1]; 
                 $avNormal[2] += $tNml[2]; 
                 $i++; 
             } 
             if($i) 
             { 
                 $avNormal[0] = $avNormal[0]/$i; 
                 $avNormal[1] = $avNormal[1]/$i; 
                 $avNormal[2] = $avNormal[2]/$i; 
                 normalize($avNormal); 
                 polyNormalPerVertex -xyz $avNormal[0] $avNormal[1] $avNormal[2] $vtx; 
             } 
         } 
         string $shorterList[] = stringArrayRemoveDuplicates($vertexName_G); 
         string $diff[] = stringArrayRemoveExact($shorterList,$vertexName_G); 
         select -cl; 
         if(size($diff)>0) 
         { 
             for($each in $diff) 
             { 
                 string $check[]={}; 
                 tokenize $each "vtx[" $check; 
                 if($check[1]!="\n"+"]") 
                 { 
                     if(catch (`select -tgl $each`)) 
                     { 
                     } 
                     else 
                     { 
                         select -cl; 
                         select -tgl $each ; 
                         polyAverageNormal -prenormalize 1 -allowZeroNormal 0 -postnormalize 0 -distance 0.1 -replaceNormalXYZ 1 0 0 ; 
                         select -cl; 
                     } 
                 } 
             } 
             if(catch(`select -r $objectName_G[0]`)) 
             { 
             }else{select -r $objectName_G[0];} 
             for($ele in $element_G) 
             { 
                 if(catch(`select -tgl $ele`)) 
                 { 
                     print("erro"); 
                 } 
                 else{ 
                     select -add $ele; 
                 } 
             } 
         } 
          
         pause -sec 1; 
         freed("Successfully hardening normal information!"); 
     } 
     proc copy() 
     { 
         
         global float $vertexNormal_G[]; 
         print("Copy Run"+"\n"); 
         string $selectList[]; 
         $selectList = `ls -selection -flatten`; 
         $elementVertex = `filterExpand -expand on -selectionMask 31 -selectionMask 70 $selectList`; 
         $elementFace = `filterExpand -expand on -selectionMask 34 $selectList`; 
         if(size($elementVertex)>0) 
         { 
             $vertexNormal_G = `polyNormalPerVertex -q -xyz $elementVertex[0]`; 
             print("Copy Value:"+"x:"+ $vertexNormal_G[0]  +"__y:"+$vertexNormal_G[1]  +"__z:"+$vertexNormal_G[2]); 
         } 
         else if(size($elementFace)>0) 
         { 
             string $faceNormal[] = `polyInfo -fn $elementFace[0]`; 
             string $tkBuf[]; 
 		    float $tNml[]={0,0,0}; 
 		    tokenize $faceNormal[0] " " $tkBuf; 
 		    $tNml[0]+=((float)($tkBuf[2])); 
 		    $tNml[1]+=((float)($tkBuf[3])); 
 		    $tNml[2]+=((float)($tkBuf[4])); 
             string $aObjName[] = stringToStringArray( $elementFace[0], "."); 
             matrix $mNrm[1][4] = adia_ObjToWorldSpace( 
 		 	adia_CreateVecMatrix($tNml[0],$tNml[1],$tNml[2]) 
 			,$aObjName[0]); 
             float $fVec3[3] = <<$mNrm[0][0], $mNrm[0][1], $mNrm[0][2]>>; 
 		    normalize($fVec3); 
             $vertexNormal_G[0]=$fVec3[0]; 
             $vertexNormal_G[1]=$fVec3[1]; 
             $vertexNormal_G[2]=$fVec3[2]; 
             print("Copy Value:"+"x:"+ $vertexNormal_G[0]  +"__y:"+$vertexNormal_G[1]  +"__z:"+$vertexNormal_G[2]); 
         } 
         freed("Successfully copy normal information!"); 
     } 
     proc paste() 
     { 
          
         global float $vertexNormal_G[]; 
         print("Paste Run"+"\n"); 
         string $selectList[]; 
         $selectList = `ls -selection -flatten`; 
         $elementVertex = `filterExpand -expand on -selectionMask 31 -selectionMask 70 $selectList`; 
         $elementFace = `filterExpand -expand on -selectionMask 34 $selectList`; 
         if(size($elementVertex)>0) 
         { 
             for($i=0;$i<size($elementVertex);$i++) 
             { 
                 polyNormalPerVertex -xyz $vertexNormal_G[0] $vertexNormal_G[1] $vertexNormal_G[2] $elementVertex[$i]; 
             } 
         } 
         if(size($elementFace)>0) 
         { 
 		    string $sVtxF_c[] = adia_classifyWithObj(`polyListComponentConversion   -toVertexFace $elementFace`); 
 		    int $i = size($sVtxF_c) / 2; 
 		    for($n=0; $n<$i; $n++){ 
 		    	matrix $mNrm[1][4] = adia_WorldToObjSpace(adia_CreateVecMatrix($vertexNormal_G [0],$vertexNormal_G[1],$vertexNormal_G[2]),$sVtxF_c[$n*2]); 
 		    	float $fVec3[3] = <<$mNrm[0][0], $mNrm[0][1], $mNrm[0][2]>>; 
 		    	normalize($fVec3); 
 		    	string $sStr[]; 
 		    	tokenizeList($sVtxF_c[$n*2 + 1],$sStr); 
 		    	select $sStr; 
 		    	polyNormalPerVertex -xyz $fVec3[0] $fVec3[1] $fVec3[2]; 
 		    }	 
         } 
        
         freed("Successfully pasted normal information!"); 
     } 
     //tool 
     proc init() 
     { 
         global string $element_G[]; 
         global string  $vertexName_G[]; 
         global string $objectName_G[]; 
         string $selectList[]; 
         $selectList = `ls -selection -flatten`; 
         string $element[]; 
         $element = `filterExpand -expand on -selectionMask 34 $selectList`; 
         for($ele in $element) 
         { 
             $element_G[size($element_G)] = $ele; 
         } 
         if(size($element)>0) 
         { 
             print("Executing..."); 
             for($i = 0 ; $i < size($element); $i++) 
             { 
                 string $objectName[] = stringToStringArray($element[$i], "."); 
                 $objectName_G[0] = $objectName[0]; 
                 string $sFaceVertexNormal[]=`polyInfo -faceToVertex $element[$i]`;  
                 string $vertex[] = stringToStringArray($sFaceVertexNormal[0], " "); 
                 string $face[] = stringToStringArray($vertex[1],":"); 
                 string $pointPosName1 = $objectName[0]+".vtx["+ $vertex[2] +"]"; 
                 string $pointPosName2 = $objectName[0]+".vtx["+ $vertex[3] +"]"; 
                 string $pointPosName3 = $objectName[0]+".vtx["+ $vertex[4] +"]"; 
                 string $pointPosName4 = $objectName[0]+".vtx["+ $vertex[5] +"]"; 
                 $vertexName_G[size($vertexName_G)] = $pointPosName1; 
                 $vertexName_G[size($vertexName_G)] = $pointPosName2; 
                 $vertexName_G[size($vertexName_G)] = $pointPosName3; 
                 $vertexName_G[size($vertexName_G)] = $pointPosName4; 
             } 
         } 
     } 
     proc freed(string $printStr) 
     { 
         global string $element_G[]; 
         global string $vertexName_G[]; 
         global string $objectName_G[]; 
         print($printStr); 
         clear $element_G; 
         clear $vertexName_G; 
         clear $objectName_G; 
     } 
     global proc matrix adia_ObjToWorldSpace(matrix $mIn_Mtx,string $sObj) 
     { 
 	    matrix $mMtx[4][4] = adia_GetObjInvMatrix($sObj); 
 	    matrix $mRes_Mtx[1][4]=$mIn_Mtx*$mMtx; 
 	    return($mRes_Mtx);   
     } 
     global proc matrix adia_CreateVecMatrix(float $x, float$y, float$z) 
     { 
 	    matrix $mRes_Mtx[1][4]=<<$x,$y,$z,0>>; 
 	    return($mRes_Mtx); 
     } 
     global proc matrix adia_GetObjInvMatrix(string $sObj) 
     { 
     	float $fMat[] = `getAttr ($sObj+".inverseMatrix")`; 
     	matrix $mMat[4][4]=<< 
     	$fMat[0],$fMat[4],$fMat[8],$fMat[12]; 
     	$fMat[1],$fMat[5],$fMat[9],$fMat[13]; 
     	$fMat[2],$fMat[6],$fMat[10],$fMat[14]; 
     	$fMat[3],$fMat[7],$fMat[11],$fMat[15]>>; 
     	return($mMat); 
     } 
     global proc string[] adia_classifyWithObj(string $slist[]) 
     { 
     	string $Res[] ; 
     	string $sArr[] = sort($slist); 
     	string $sObjName = ""; 
     	string $sCrntObjName[]; 
     	int $i=-1; 
     	string $sNameArray[]; 
     	if(size($sArr)){ 
     		for($sElm in $sArr){ 
     			$sNameArray = stringToStringArray($sElm, "."); 
     			if($sNameArray[0] != $sObjName){ 
     				$i++; 
     				$sObjName = $sNameArray[0]; 
     				$Res[$i*2]= $sNameArray[0]; 
     				$Res[$i*2+1]= $sElm; 
     			}else{ 
     				$Res[$i*2+1] = $Res[$i*2+1] + " " + $sElm; 
     			} 
     		} 
     	} 
     	return($Res); 
     } 
     global proc matrix adia_WorldToObjSpace(matrix $mIn_Mtx,string $sObj) 
     { 
     	matrix $mMtx[4][4] = adia_GetObjMatrix($sObj); 
     	matrix $mRes_Mtx[1][4]=$mIn_Mtx*$mMtx; 
     	return($mRes_Mtx); 
     } 
     global proc matrix adia_GetObjMatrix(string $sObj) 
     { 
     	 
     	float $fMat[] = `getAttr ($sObj+".matrix")`; 
     	matrix $mMat[4][4]=<< 
     	$fMat[0],$fMat[4],$fMat[8],$fMat[12]; 
     	$fMat[1],$fMat[5],$fMat[9],$fMat[13]; 
     	$fMat[2],$fMat[6],$fMat[10],$fMat[14]; 
     	$fMat[3],$fMat[7],$fMat[11],$fMat[15]>>; 
  
     	return($mMat); 
     } 
     VertexNormalSort();