文档规则：
    注释：
        (这是注释)
    省略：
        ...
    包含：
        <
    值：
        >
    代码：
        <(代码)>

设计模式：
    单例模式：

        思路：
            限制了实例的个数
        好处：
            节省内存

    中介者模式：

        中介者对象，该对象封装了系统中对象间的交互方式，例如 MVVM
    
    迭代器：
        是确使用户可在容器对象（container，例如链表或数组）上遍访的对象
        例如：
            python中的 in 关键字的用法

算法：
    折半搜索
    汉诺塔算法
    并行计算
    离线算法
    数据结构
        链表
    大O算法:
    贪心算法
    动态规划
    路由算法
    P2P:
        分布式散列表
    多媒体传输
    *任务调度
    线程切换
    内存管理
    银行家算法
    硬盘读取的电梯算法
    TCP
        流量限制
        堵塞控制
    加密算法
    共有密码
    隐蔽通道
    非对称加密
    不重复密码

数据结构：
    数据的顺序和位置
    链表：
        添加删除快
        访问费时
        每个数据的指针指向下一个数据内存地址
        无需连续

    数组
    栈
    队列
    哈希表
    堆
    二叉查找树

软件架构：

    MVVM( MVC的延展 ):
        目标：
            从模型中转换数据对象，以便轻松管理和呈现对象
        案例：
            Kanzi
    MVC:
        目标：
            实现一种动态的程序设计，使后续对程序的修改和扩展简化，并且使程序某一部分的重复利用成为可能。
        案例:
            unity 可以实现
    MVP（MVC的延展）:
        多了Presenter：
            事件处理模块