文档规则：
    注释：
        (这是注释)
    省略：
        ...
    包含：
        <
    值：
        >
    代码：
        <(代码)>

文件结构：
    参考：https://abaojin.github.io/2018/03/11/unity-project/
    官方解释：https://learn.unity.com/tutorial/project-architecture-unity-project-folder-structure?uv=4.x#5c7f8528edbc2a002053b672
    源码管理：
        Assets:
            腾讯整理：
                https://gameinstitute.qq.com/community/detail/129050
            特殊文件夹：
                Editor：
                    无论在根目录或者子目录，该文件下的脚本只能在编辑器中运行。
                Editor Default Resources：
                    （中间空格不能省略）必须放在根目录，用于存放编辑器需要用到的图片文本等资源。（可以通过EditorGUIUtility.Load读取）
                Gizmos：
                    Gizmos.DrawIcon(transform.position,"0.png",true);调用的0.png就是这个文件夹下的文件
                Plugins：
                    做平台开发（ios，安卓，小米...）所依赖的sdk放在这里，打包的时候会把这个文件夹中的sdks一起打包
                Resources：
                    无论在根目录或者子目录，会把文件夹下的资源直接打包，可以读写，会被压缩，Resource.Load直接读取这个路径下的文件
                StreamingAssets：
                    这个文件夹会被打包，只能读取，不会压缩。
                .(隐藏文件)：
                    以.开头的不会被导入到引擎中，不会打包
                WebPlayerTemplates：
                    不会被编译，存放网页相关文件
                Standard Assets：
                    导入标准材质包时创建，由自己的编译顺序
            编译顺序：
                1.运行时依赖的脚本：
                    Standard Assets Pro/Standard Assets/Plugins/MonoBehaviour/ScriptableObject...
                2.编译器中的文件：
                    1.1.Editor中的和Editor相关的文件
                    1.2.Editor之外的脚本
                    1.3.Editor之中的脚本
        ProjectSettings：
           存储所有项目设置（物理，标签，播放器...）表示在编辑器中：“编辑”->“项目设置”的所有内容
        
    从源码管理中产生的：
        Packages：
        Library：
            版本控制时，本地缓存应当完全忽略
        Temp：
            临时文件，可以删除，给MonoDevelop使用
        obj：
            临时文件，可以删除，给Unity使用
        代码文件：
            Assembly-CSharp-vs.csproj & Assembly-CSharp.csproj：
                是由VisualStudio和MonoDevelop产生的文件
            Assembly-CSharp-vs.csproj & Assembly-CSharp.csproj:
                是为JavaScript准备的



MonoDevelop：
    概念：
        https://en.wikipedia.org/wiki/MonoDevelop
        是一个开源的集成开发环境。使用Mono和.net框架(详见windows笔记)

功能模块：
    Shader：
        API:
            Category {}:
                分类是如下任意命令的逻辑组。大多数情况下是被用于继承渲染状态。例如，你的着色器可以有多个子着色器，他们都需要关闭雾效果，附加的混合，等等。
            Fallback "name"
                退回到给定名称的着色器
            Fallback Off
                显式声明没有fallback并且不会打印任何警告，甚至没有子着色器会被运行
        HLSL：
            文档：
                官方：
                    https://docs.unity3d.com/Packages/com.unity.render-pipelines.universal@10.4/manual/index.html
                知乎：
                    https://zhuanlan.zhihu.com/p/84908168
        操作：
            修改颜色和sprite：
                https://dev.twsiyuan.com/2017/10/unity-custom-sprite-shader.html
    自带:
        Presets(预设)：
            保存：
                Inspector:
                    右上角第一个：
                        左下角SaveCurrtenTo
            读取：
                Inspector:
                    右上角第一个
                        选择
        显示线框：
        particle:
            粒子系统参照：
                ref：
                    https://www.bilibili.com/read/cv3942583/
            
    插件：
        MagicaCloth：
            下载：
                CSDN：
                    50元
                官方：
                    25美元一位
        
        shaderGraph：
            

版本控制：
    gitignore：
        https://learn.unity.com/tutorial/project-architecture-unity-project-folder-structure?uv=4.x#5c7f8528edbc2a002053b672

Adia任务：
    unity炸弹人需求：
        \\192.168.10.3\Producer_New\GA_Producer\Incoming\Japan\KDE\FUSE\B00\测试用
    unityXD需求：
        \\192.168.10.3\Producer_New\GA_Producer\Incoming\China\XD\XDXZ\B01\3D道具\New\XDXZ_LookDev
        file://192.168.10.3/Producer_New/GA_Producer/Incoming/China/XD/XDXZ/B01/3D道具/New/物件制作规范.pdf

优化：
    粒子特效:
        原理：
            参考：https://blog.csdn.net/alla_Candy/article/details/103709925
            梳理：
                
        方案：
            参考：https://www.cnblogs.com/cnxkey/articles/9743920.html

    粒子系统消耗检查工具：
        https://networm.me/2019/07/28/unity-particle-effect-profiler/

插件：
    粒子特效性能测试：
        https://github.com/sunbrando/ParticleEffectProfiler
    复制粘贴：
        https://www.jianshu.com/p/68680a67ff0e
    texutrePackerGUI：
        https://www.codeandweb.com/texturepacker/tutorials/using-spritesheets-with-unity
    减包体大小分割Texture2D：
        https://www.codenong.com/cs105490621/
    编译dll：
        https://blog.csdn.net/Fenglele_Fans/article/details/82694333

渲染管线：
    LWRP:
        着色器架构：
            目标平台着色器平台：
                2.0：
                    全平台

            前向渲染 ForwardLit：
                顶点片元
            阴影渲染 ShadowCaster：
                顶点
            深度渲染 DepthOnly：
                顶点
            全局信息 Meta：
                顶点片元
        安装：
            PackageManager：
                LightweightRenderPipeline
        自定义渲染管线（黑客行为）：
            https://youtu.be/3TULxrZCAdM
        HLSL:
            高精准度： float
            中等精度： half
            低精度： fixed
            整数（int数据类型）
            复合向量/矩阵类型:
                float3
                float4x4
        unity GI （Global Illumination）:
            全局光照：
                光线相互之间的弹射
            阴影存在：
                ShadowCaster
                在C#中存的全局变量
        特定tage渲染：
            https://docs.unity3d.com/Packages/com.unity.render-pipelines.universal@12.0/manual/renderer-features/how-to-custom-effect-render-objects.html
        后处理：
            https://youtu.be/bkPe1hxOmbI
            https://youtu.be/Ts2F2SxeRSY
            设置：
                安装：
                    PackageManager：
                        PostProcess
                目标相机挂载：
                    PostProcessLayer:
                        设置layer
                空物体挂载：
                    PostProcessVolume:
                启用：
                    Graphics：
                        找到渲染管线：
                            启用HDR
    HDRP:
        文件结构:
            CoreRPLibrary/ShaderLibrary:

                保存了大量的工具函数：光照计算工具函数，随机数计算，矩阵工具，坐标转换工具，风场，ParallaxOcclusionMapping等。

            CoreRPLibrary/ShaderLibrary/API:

                保存了跨平台函数的定义。

            HDRP/Runtime/Material:

                保存了HDRP中默认支持的材质Shader：Lit，LayeredLit，Stacklit等，都是和各自材质相关的计算。不同的材质中包含了不同的BSDF函数的实现、不同的BuiltinData的组织方式。

            HDRP/Runtime/PostProcessing/Shaders:

                后处理的Shader，HDRP中后处理全部使用ComputeShader。

            HDRP/Runtime/RenderPipeline/ShaderPass:

            ShaderPass的定义：包括了Vertex和Fragment程序的定义。

            HDRP/Runtime/RenderPipeline/ShaderLibrary:

                从C#当中设置的Shader参数，包括：各种变换矩阵、获取矩阵的函数、摄像机参数、场景参数、全部buffer、全局纹理、shader控制参数等。
        核心技术：
            TAA：
                temporalAntialiasing：时效性抗锯齿,逐屏幕像素实时采样
        着色器架构： 
            目标平台着色器平台：
                4.5：
                    DirectX 11 功能级别 11+
                    OpenGL 4.3+
                    OpenGL ES 3.1
                    Vulkan
                    Metal
            子着色器1：
                ScenePickingPass：
                    允许编辑器正确处理镶嵌对象和背面对象的拾取  
                SceneSelectionPass:
                    用于渲染对象的通道是ForwardOnly,选择通道着色器用于渲染一个带有对象 id 的缓冲区，稍后在场景视图中使用该对象 id 绘制轮廓
                Gbuffer:
                    通用概念：
                        用于存储有关几何体的不同位信息，例如世界法线、基色、粗糙度等。 Unreal 在光照时对这些缓冲区进行采样计算以确定最终的阴影。
                    HDRP概念：
                        可以存储您想要的任何类型的数据，编写一个自定义 SRP，它可以让您完全控制 GBuffer 布局和格式。
                        目前unity默认只开放4种数据通道：其中空闲的通道只有rt2
                meta：
                    计入全局缓存，用于物体之间的正确计算间接照明
                ShadowCaster：
                    用于将对象渲染到阴影贴图中
                DepthOnly：
                    渲染到深度缓冲区
                MotionVectors：
                    渲染每一个运动的物体，计算每像素运动向量，使用深度纹理来剔除不用计算的向量，避免过多占用算力
                (一下决定了光追的正确性，渲染顺序必须按照如下排列)
                TransparentDepthPrepass：
                    将透明表面的多边形添加到深度缓冲区以改进其排序
                TransparentBackface：
                    为了正确的光追而存在，得在前向渲染之前处理才有效
                Forward：
                    根据影响对象的灯光，在一个或多个通道中渲染每个对象。
                TransparentDepthPostpass：
                    透明物体Postpass深度
                RayTracingPrepass:
                    递归渲染依赖这个pass，投射折射和反射光线，这个pass决定了光线可以撞击表面反射的次数
                FullScreenDebug：
                    可以单个输出所有pass的工作状况
            子着色器2：
                关于光追踪对RTX显卡的适配：
                    IndirectDXR
                    ForwardDXR
                    GBufferDXR
                    VisibilityDXR
                    SubSurfaceDXR
                    PathTracingDXR


        渲染管线架构：       
            光线追踪：

        REF:
            https://www.youtube.com/watch?v=ad9f_nKU0ZA
            https://liangz0707.github.io/whoimi/blogs/HDRPsource/new2.HDRPShader%E5%BC%80%E5%8F%91%E8%AF%B4%E6%98%8E.html          





报错：
    无法确定预设文件位置类型 /Users/ myUserName /Library/Preferences/Unity/Editor-5.x/Presets/Default UnityEngine.GUIUtility:ProcessEvent(Int32, IntPtr)：
        转到您的注册表，Computer\HKEY_CURRENT_USER\Software\Unity Technologies\Unity Editor 5.x，并打开所有包含“CurrentLib”的键（例如我机器上的particleCurvesCurrentLib_h1743720187），然后将二进制字符串编辑为指向正确的路径。
        ref：
            https://answers.unity.com/questions/1566475/how-to-reset-unity-user-preferences.html

    unityHub下载过于缓慢：
        在C盘找到日志：
            %APPDATA%\UnityHub\logs\info-log.json
        可以看到Unity3d 2019.1.14f1的下载地址是：
            https://download.unitychina.cn/download_unity/148b5891095a/Windows64EditorInstaller/UnitySetup64-2019.1.14f1.exe
