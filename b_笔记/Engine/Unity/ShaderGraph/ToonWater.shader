Shader "Toon/Water"
{
    Properties
    {
		// What color the water will sample when the surface below is shallow.
		_DepthGradientShallow("Depth Gradient Shallow", Color) = (0.325, 0.807, 0.971, 0.725)

		// What color the water will sample when the surface below is at its deepest.
		_DepthGradientDeep("Depth Gradient Deep", Color) = (0.086, 0.407, 1, 0.749)

		// Maximum distance the surface below the water will affect the color gradient.
		_DepthMaxDistance("Depth Maximum Distance", Float) = 1

		// Color to render the foam generated by objects intersecting the surface.
		_FoamColor("Foam Color", Color) = (1,1,1,1)

		// Noise texture used to generate waves.
		_SurfaceNoise("Surface Noise", 2D) = "white" {}

		// Speed, in UVs per second the noise will scroll. Only the xy components are used.
		_SurfaceNoiseScroll("Surface Noise Scroll Amount", Vector) = (0.03, 0.03, 0, 0)

		// Values in the noise texture above this cutoff are rendered on the surface.
		_SurfaceNoiseCutoff("Surface Noise Cutoff", Range(0, 1)) = 0.777

		// Red and green channels of this texture are used to offset the
		// noise texture to create distortion in the waves.
		_SurfaceDistortion("Surface Distortion", 2D) = "white" {}	

		// Multiplies the distortion by this value.
		_SurfaceDistortionAmount("Surface Distortion Amount", Range(0, 1)) = 0.27

		// Control the distance that surfaces below the water will contribute
		// to foam being rendered.
		_FoamMaxDistance("Foam Maximum Distance", Float) = 0.4
		_FoamMinDistance("Foam Minimum Distance", Float) = 0.04		
    }
    SubShader
    {
		Tags
		{
			"Queue" = "Transparent"
		}

        Pass
        {
			Blend SrcAlpha OneMinusSrcAlpha
			ZWrite Off
			
			Tags {
				"LightMode"="ForwardBase" 
				"RenderType"="Opaque" 
				"Queue"="Geometry+1" 
				"ForceNoShadowCasting"="True"
				}
            CGPROGRAM
			#define SMOOTHSTEP_AA 0.01

            #pragma vertex vert
            #pragma fragment frag

            #include "UnityCG.cginc"
		#include "Lighting.cginc"
		#include "AutoLight.cginc"
		#pragma multi_compile_fwdbase nolightmap nodirlightmap nodynlightmap novertexlight
			// Blends two colors using the same algorithm that our shader is using
			// to blend with the screen. This is usually called "normal blending",
			// and is similar to how software like Photoshop blends two layers.
			float4 alphaBlend(float4 top, float4 bottom)
			{
				float3 color = (top.rgb * top.a) + (bottom.rgb * (1 - top.a));
				float alpha = top.a + bottom.a * (1 - top.a);

				return float4(color, alpha);
			}

            struct appdata
            {
                float4 vertex : POSITION;
		    float4 uv : TEXCOORD0;
		    float3 normal : NORMAL;
		    
            };

            struct v2f
            {
                		float4 pos : SV_POSITION;	
				float2 noiseUV : TEXCOORD0;
				float2 distortUV : TEXCOORD1;
				float4 screenPosition : TEXCOORD2;
				float3 viewNormal : NORMAL;
				SHADOW_COORDS(3) // 光影
				fixed3 diff : COLOR0;
                		fixed3 ambient : COLOR1;
            };

			sampler2D _SurfaceNoise;
			float4 _SurfaceNoise_ST;

			sampler2D _SurfaceDistortion;
			float4 _SurfaceDistortion_ST;

            v2f vert (appdata v)
            {
                v2f o;
				half3 worldNormal = UnityObjectToWorldNormal(v.normal);
				o.viewNormal = v.normal;
                		o.pos = UnityObjectToClipPos(v.vertex);
				o.screenPosition = ComputeScreenPos(o.pos);
				o.distortUV = TRANSFORM_TEX(v.uv, _SurfaceDistortion);
				o.noiseUV = TRANSFORM_TEX(v.uv, _SurfaceNoise);
				half nl = max(0, dot(worldNormal, _WorldSpaceLightPos0.xyz));
				o.diff = nl * _LightColor0.rgb;
				o.ambient = ShadeSH9(half4(worldNormal,1));
				TRANSFER_SHADOW(o) // 光影

                return o;
            }

			float4 _DepthGradientShallow;
			float4 _DepthGradientDeep;
			float4 _FoamColor;

			float _DepthMaxDistance;
			float _FoamMaxDistance;
			float _FoamMinDistance;
			float _SurfaceNoiseCutoff;
			float _SurfaceDistortionAmount;

			float2 _SurfaceNoiseScroll;

			sampler2D _CameraDepthTexture;
			sampler2D _CameraNormalsTexture;

            float4 frag (v2f i) : SV_Target
            {
			
			float f_Depth = tex2Dproj(_CameraDepthTexture,i.screenPosition).r;//https://developer.download.nvidia.com/cg/tex2Dproj.html
			f_Depth = LinearEyeDepth(f_Depth);//归一化视角深度
			f_Depth = saturate( smoothstep(-i.screenPosition.y*6.6f-0.4f,i.screenPosition.y*6.6f-0.4f,f_Depth));
			float4 waterColor = lerp( _DepthGradientDeep,_DepthGradientShallow, f_Depth); 
			fixed shadow = SHADOW_ATTENUATION(i);
			if(normalize(i.viewNormal.y)>0.5f)
			{
				// 阴影
				// fixed3 lighting = i.diff * shadow + i.ambient; // 光影
				// waterColor.rgb *= lighting; // 光影
				// 波浪
			

				float surfaceNoiseCutoff = f_Depth * _SurfaceNoiseCutoff;
				
				float2 distortSample = (tex2D(_SurfaceDistortion, i.distortUV).xy * 2 - 1) * _SurfaceDistortionAmount;
				float2 noiseUV  = float2((i.noiseUV.x + _Time.y * _SurfaceNoiseScroll.x) + distortSample.x, 
				(i.noiseUV.y + _Time.y * _SurfaceNoiseScroll.y) + distortSample.y);
				
				float surfaceNoiseSample = tex2D(_SurfaceNoise, noiseUV).r;
				float surfaceNoise = smoothstep(0.6,0.81,surfaceNoiseSample);
				waterColor.rgb += saturate(surfaceNoise).xxx * 0.5f * pow(i.screenPosition.x,1.5f);
				
					
			}
			return float4(waterColor.rgb,1.0);
				
            }
            ENDCG
        }
	  UsePass "Legacy Shaders/VertexLit/SHADOWCASTER"
    }
}
